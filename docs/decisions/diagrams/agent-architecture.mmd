classDiagram
    Agent
    Agent <|-- KernelAgent
    Agent <|-- NexusAgent
    Agent <|-- ProxyAgent
    KernelAgent <|-- ChatCompletionAgent
    KernelAgent <|-- OpenAIAssistantAgent

    AgentChannel~Agent~
    AgentChannel <|-- LocalChannel~Agent~
    AgentChannel <|-- OpenAIAssistantChannel~OpenAIAssistantAgent~

    AgentNexus
    AgentNexus <|-- AgentChat
    AgentNexus <|-- GroupChat

    Agent --> AgentNexus
    class Agent {
        <<Abstract>>        
        +String Id
        +String? Name
        +String? Description
        ~#Type ChannelType*
        ~#Task~AgentChannel~ CreateChannelAsync(AgentNexus nexus)*
    }
    class NexusAgent {
        -AgentNexus _nexus
    }
    class ProxyAgent {
        -Agent _agent
    }
    class KernelAgent {
        <<Abstract>>        
        +Kernel Kernel
    }
    ChatCompletionAgent --> LocalChannel
    class ChatCompletionAgent {
        +String? Instructions
        ~#Type ChannelType
        ~#Task~AgentChannel~ CreateChannelAsync()
        -IAsyncEnumerable<ChatMessageContent> InvokeAsync(ChatAgent agent, ChatHistory chat)$
    }

    OpenAIAssistantAgent --> OpenAIAssistantChannel
    class OpenAIAssistantAgent {
        <<Final>>
        -AssistantClient _client
        Assistant _assistant
        +String? Instructions
        ~#Type ChannelType
        ~#Task~AgentChannel~ CreateChannelAsync()
    }

    class AgentChannel {
        <<Abstract>>
        ~#IAsyncEnumerable~ChatMessageContent~ InvokeAsync(Agent agent, ChatMessageContent? input = null)*
        ~#IAsyncEnumerable<ChatMessageContent> GetHistoryAsync()*
        ~#Task ReceiveAsync(IEnumerable<ChatMessageContent> history)*
    }

    class LocalChannel {
        <<Final>>
        -AgentInvocationCallback _invoker
        -ChatHistory _chat
        ~#IAsyncEnumerable~ChatMessageContent~ InvokeAsync(Agent agent, ChatMessageContent? input = null)
        ~#IAsyncEnumerable<ChatMessageContent> GetHistoryAsync()
        ~#Task ReceiveAsync(IEnumerable<ChatMessageContent> history)
    }

    class OpenAIAssistantChannel {
        <<Final>>
        -AssistantClient _client
        -int _threadId
        ~#IAsyncEnumerable~ChatMessageContent~ InvokeAsync(Agent agent, ChatMessageContent? input = null)
        ~#IAsyncEnumerable<ChatMessageContent> GetHistoryAsync()
        ~#Task ReceiveAsync(IEnumerable<ChatMessageContent> history)
    }

    AgentNexus o-- AgentChannel
    class AgentNexus {
        <<Abstract>>
        -Dictionary~Type, AgentChannel~ _agentChannels
        ~ChatHistory History
        +IAsyncEnumerable~ChatMessageContent~ GetHistoryAsync(Agent? agent = null)
        #IAsyncEnumerable~ChatMessageContent~ InvokeAgentAsync(Agent agent, ChatMessageContent? input = null)
        -Task~AgentChannel~ GetChannelAsync(Agent agent)
    }

    AgentChat o-- Agent
    class AgentChat {
        +IReadOnlyList<Agent> Agents
        +ExecutionSettings ExecutionSettings
        +bool IsComplete
        +IAsyncEnumerable~ChatMessageContent~ InvokeAgentAsync()
        +IAsyncEnumerable~ChatMessageContent~ InvokeAgentAsync(string? input = null)
        +IAsyncEnumerable~ChatMessageContent~ InvokeAgentAsync(ChatMessageContent? input = null)
        +IAsyncEnumerable~ChatMessageContent~ InvokeAgentAsync(Agent agent, string? input = null)
        +IAsyncEnumerable~ChatMessageContent~ InvokeAgentAsync(Agent agent, ChatMessageContent? input = null)
    }

    class GroupChat {
        <<AutoGen>>
    }
    